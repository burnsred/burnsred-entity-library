{"version":3,"file":"development.js","sources":["../src/index.js"],"sourcesContent":["import { Duck } from '@gnowth/entity-duck';\nimport { Map } from 'immutable';\n\nexport default class ScreenDuck extends Duck {\n  static namespace = 'screens';\n\n  static actions = {\n    clear: Duck.createAction(),\n    get: Duck.createAction({\n      defaultMeta: {\n        id: null,\n        keyClear: 'clear',\n        keyRecord: 'record',\n        keySave: 'save',\n        params: Map(),\n      },\n    }),\n    save: Duck.createAction(),\n  };\n\n  static getInitialState({ entity }) {\n    const defaultValue = entity.dataToRecord({});\n\n    return Map({\n      detail: defaultValue,\n      detail_dirty: defaultValue,\n    });\n  }\n\n  static getReducers(types, initialState) {\n    return {\n      [types.clear]: (state, action) => (\n        action.meta.dirty\n          ? state.set('detail_dirty', state.get('detail'))\n          : initialState\n      ),\n\n      [types.save]: (state, action) => {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!Map.isMap(action?.payload)) throw new Error('DuckScreen (save): payload must be an Immutable Map');\n        }\n\n        return state.withMutations(\n          s => s\n            .update('detail', detail => (action.meta.dirty ? detail : action.payload))\n            .set('detail_dirty', action.payload),\n        );\n      },\n    };\n  }\n\n  record(state, { dirty, id } = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (id !== null) throw new Error('DuckScreen (record): only support id === null');\n    }\n\n    return state.getIn([\n      this.app,\n      this.constructor.namespace,\n      this.entity.name, dirty ? 'detail_dirty' : 'detail',\n    ]);\n  }\n}\n\n/**\n * ability to create local\n * id === null for create local ?\n *\n * get action/selectors based on props in queryDuck?\n * errors from entity\n *\n * action to return promise?\n */\n"],"names":["ScreenDuck","Duck","getInitialState","entity","defaultValue","dataToRecord","Map","detail","detail_dirty","getReducers","types","initialState","clear","state","action","meta","dirty","set","get","save","process","env","NODE_ENV","isMap","payload","Error","withMutations","s","update","record","id","getIn","app","constructor","namespace","name","createAction","defaultMeta","keyClear","keyRecord","keySave","params"],"mappings":";;;;;;;;;;;;;;;;;;AAGe,MAAMA,UAAN,SAAyBC,IAAzB,CAA8B;SAiBpCC,eAAP,CAAuB;IAAEC;GAAzB,EAAmC;UAC3BC,YAAY,GAAGD,MAAM,CAACE,YAAP,CAAoB,EAApB,CAArB;WAEOC,KAAG,CAAC;MACTC,MAAM,EAAEH,YADC;MAETI,YAAY,EAAEJ;KAFN,CAAV;;;SAMKK,WAAP,CAAmBC,KAAnB,EAA0BC,YAA1B,EAAwC;WAC/B;OACJD,KAAK,CAACE,KAAP,GAAe,CAACC,KAAD,EAAQC,MAAR,KACbA,MAAM,CAACC,IAAP,CAAYC,KAAZ,GACIH,KAAK,CAACI,GAAN,CAAU,cAAV,EAA0BJ,KAAK,CAACK,GAAN,CAAU,QAAV,CAA1B,CADJ,GAEIP,YAJD;OAOJD,KAAK,CAACS,IAAP,GAAc,CAACN,KAAD,EAAQC,MAAR,KAAmB;YAC3BM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;cACrC,CAAChB,KAAG,CAACiB,KAAJ,CAAUT,MAAV,aAAUA,MAAV,uBAAUA,MAAM,CAAEU,OAAlB,CAAL,EAAiC,MAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;;;eAG5BZ,KAAK,CAACa,aAAN,CACLC,CAAC,IAAIA,CAAC,CACHC,MADE,CACK,QADL,EACerB,MAAM,IAAKO,MAAM,CAACC,IAAP,CAAYC,KAAZ,GAAoBT,MAApB,GAA6BO,MAAM,CAACU,OAD9D,EAEFP,GAFE,CAEE,cAFF,EAEkBH,MAAM,CAACU,OAFzB,CADA,CAAP;;KAZJ;;;EAqBFK,MAAM,CAAChB,KAAD,EAAQ;IAAEG,KAAF;IAASc;MAAO,EAAxB,EAA4B;QAC5BV,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;UACrCQ,EAAE,KAAK,IAAX,EAAiB,MAAM,IAAIL,KAAJ,CAAU,+CAAV,CAAN;;;WAGZZ,KAAK,CAACkB,KAAN,CAAY,CACjB,KAAKC,GADY,EAEjB,KAAKC,WAAL,CAAiBC,SAFA,EAGjB,KAAK/B,MAAL,CAAYgC,IAHK,EAGCnB,KAAK,GAAG,cAAH,GAAoB,QAH1B,CAAZ,CAAP;;;;;;;;;;;;;;gBArDiBhB,yBACA;;gBADAA,uBAGF;EACfY,KAAK,EAAEX,IAAI,CAACmC,YAAL,EADQ;EAEflB,GAAG,EAAEjB,IAAI,CAACmC,YAAL,CAAkB;IACrBC,WAAW,EAAE;MACXP,EAAE,EAAE,IADO;MAEXQ,QAAQ,EAAE,OAFC;MAGXC,SAAS,EAAE,QAHA;MAIXC,OAAO,EAAE,MAJE;MAKXC,MAAM,EAAEnC,KAAG;;GANV,CAFU;EAWfa,IAAI,EAAElB,IAAI,CAACmC,YAAL;;;;;"}